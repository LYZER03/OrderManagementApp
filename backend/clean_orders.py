#!/usr/bin/env python
"""
Script pour nettoyer la table des commandes (orders_order) dans la base de donn√©es.
Ce script permet de supprimer toutes les commandes ou de les filtrer selon certains crit√®res.
"""

import os
import sys
import django
import datetime
import argparse
from django.utils import timezone

# Configurer l'environnement Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

# Importer les mod√®les apr√®s la configuration de Django
from orders.models import Order
from authentication.models import User

def delete_all_orders():
    """Supprime toutes les commandes de la base de donn√©es."""
    count = Order.objects.count()
    Order.objects.all().delete()
    print(f"‚úÖ {count} commandes ont √©t√© supprim√©es avec succ√®s.")

def delete_orders_by_date(before_date=None, after_date=None):
    """
    Supprime les commandes cr√©√©es avant ou apr√®s une date sp√©cifique.
    
    Args:
        before_date (str): Supprimer les commandes cr√©√©es avant cette date (format: YYYY-MM-DD)
        after_date (str): Supprimer les commandes cr√©√©es apr√®s cette date (format: YYYY-MM-DD)
    """
    queryset = Order.objects.all()
    
    if before_date:
        date_obj = datetime.datetime.strptime(before_date, '%Y-%m-%d').date()
        queryset = queryset.filter(created_at__date__lt=date_obj)
    
    if after_date:
        date_obj = datetime.datetime.strptime(after_date, '%Y-%m-%d').date()
        queryset = queryset.filter(created_at__date__gt=date_obj)
    
    count = queryset.count()
    queryset.delete()
    
    date_info = ""
    if before_date:
        date_info += f" cr√©√©es avant le {before_date}"
    if after_date:
        date_info += f" cr√©√©es apr√®s le {after_date}"
    
    print(f"‚úÖ {count} commandes{date_info} ont √©t√© supprim√©es avec succ√®s.")

def delete_orders_by_status(status):
    """
    Supprime les commandes ayant un statut sp√©cifique.
    
    Args:
        status (str): Statut des commandes √† supprimer (CREATED, PREPARED, CONTROLLED, PACKED)
    """
    status = status.upper()
    valid_statuses = [choice[0] for choice in Order.STATUS_CHOICES]
    
    if status not in valid_statuses:
        print(f"‚ùå Statut invalide. Les statuts valides sont: {', '.join(valid_statuses)}")
        return
    
    count = Order.objects.filter(status=status).count()
    Order.objects.filter(status=status).delete()
    print(f"‚úÖ {count} commandes avec le statut '{status}' ont √©t√© supprim√©es avec succ√®s.")

def keep_only_today_orders():
    """Conserve uniquement les commandes cr√©√©es aujourd'hui et supprime toutes les autres."""
    today = timezone.now().date()
    count = Order.objects.exclude(created_at__date=today).count()
    Order.objects.exclude(created_at__date=today).delete()
    print(f"‚úÖ {count} commandes non cr√©√©es aujourd'hui ont √©t√© supprim√©es.")
    remaining = Order.objects.count()
    print(f"üìä {remaining} commandes d'aujourd'hui ont √©t√© conserv√©es.")

def create_test_orders(count=10):
    """
    Cr√©e des commandes de test pour aujourd'hui.
    
    Args:
        count (int): Nombre de commandes √† cr√©er
    """
    # R√©cup√©rer les agents
    agents = User.objects.filter(role='AGENT')
    if not agents.exists():
        print("‚ùå Aucun agent trouv√© dans la base de donn√©es. Impossible de cr√©er des commandes.")
        return
    
    # Cr√©er les commandes
    orders_created = 0
    statuses = [choice[0] for choice in Order.STATUS_CHOICES]
    
    for i in range(count):
        # Choisir un agent al√©atoirement
        agent_index = i % agents.count()
        agent = agents[agent_index]
        
        # Choisir un statut al√©atoirement
        status_index = i % len(statuses)
        status = statuses[status_index]
        
        # Cr√©er une r√©f√©rence unique
        reference = f"TEST-{timezone.now().strftime('%Y%m%d')}-{i+1:03d}"
        
        # Cr√©er la commande
        order = Order.objects.create(
            reference=reference,
            status=status,
            creator=agent
        )
        
        # Mettre √† jour les timestamps en fonction du statut
        now = timezone.now()
        
        if status in ['PREPARED', 'CONTROLLED', 'PACKED']:
            order.prepared_at = now - datetime.timedelta(minutes=30)
            order.preparer = agent
        
        if status in ['CONTROLLED', 'PACKED']:
            order.controlled_at = now - datetime.timedelta(minutes=20)
            order.controller = agent
        
        if status == 'PACKED':
            order.packed_at = now - datetime.timedelta(minutes=10)
            order.packer = agent
        
        order.save()
        orders_created += 1
    
    print(f"‚úÖ {orders_created} commandes de test ont √©t√© cr√©√©es avec succ√®s.")

def show_order_stats():
    """Affiche des statistiques sur les commandes dans la base de donn√©es."""
    total_count = Order.objects.count()
    
    if total_count == 0:
        print("üìä Aucune commande dans la base de donn√©es.")
        return
    
    # Compter par statut
    status_counts = {}
    for status_choice in Order.STATUS_CHOICES:
        status_code = status_choice[0]
        count = Order.objects.filter(status=status_code).count()
        status_counts[status_choice[1]] = count
    
    # Compter par date
    today = timezone.now().date()
    today_count = Order.objects.filter(created_at__date=today).count()
    yesterday = today - datetime.timedelta(days=1)
    yesterday_count = Order.objects.filter(created_at__date=yesterday).count()
    this_month = Order.objects.filter(created_at__date__month=today.month, created_at__date__year=today.year).count()
    
    # Afficher les statistiques
    print("\nüìä STATISTIQUES DES COMMANDES üìä")
    print(f"Nombre total de commandes: {total_count}")
    print("\nPar statut:")
    for status, count in status_counts.items():
        print(f"  - {status}: {count} ({round(count/total_count*100, 1)}%)")
    
    print("\nPar p√©riode:")
    print(f"  - Aujourd'hui: {today_count}")
    print(f"  - Hier: {yesterday_count}")
    print(f"  - Ce mois-ci: {this_month}")
    
    # Afficher les 5 commandes les plus r√©centes
    print("\nCommandes les plus r√©centes:")
    recent_orders = Order.objects.order_by('-created_at')[:5]
    for order in recent_orders:
        print(f"  - {order.reference} ({order.status}) cr√©√©e le {order.created_at.strftime('%Y-%m-%d %H:%M')}")

def main():
    parser = argparse.ArgumentParser(description='Outil de nettoyage de la table des commandes')
    
    # Cr√©er un groupe d'arguments mutuellement exclusifs
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--all', action='store_true', help='Supprimer toutes les commandes')
    group.add_argument('--before', type=str, help='Supprimer les commandes cr√©√©es avant une date (format: YYYY-MM-DD)')
    group.add_argument('--after', type=str, help='Supprimer les commandes cr√©√©es apr√®s une date (format: YYYY-MM-DD)')
    group.add_argument('--status', type=str, help='Supprimer les commandes avec un statut sp√©cifique')
    group.add_argument('--keep-today', action='store_true', help='Conserver uniquement les commandes cr√©√©es aujourd\'hui')
    group.add_argument('--create-test', type=int, nargs='?', const=10, help='Cr√©er des commandes de test (nombre par d√©faut: 10)')
    group.add_argument('--stats', action='store_true', help='Afficher des statistiques sur les commandes')
    
    args = parser.parse_args()
    
    # Confirmation avant suppression
    if args.all or args.before or args.after or args.status or args.keep_today:
        confirm = input("‚ö†Ô∏è Cette op√©ration va supprimer des commandes de la base de donn√©es. Continuer? (o/n): ")
        if confirm.lower() != 'o':
            print("Op√©ration annul√©e.")
            return
    
    # Ex√©cuter l'action demand√©e
    if args.all:
        delete_all_orders()
    elif args.before:
        delete_orders_by_date(before_date=args.before)
    elif args.after:
        delete_orders_by_date(after_date=args.after)
    elif args.status:
        delete_orders_by_status(args.status)
    elif args.keep_today:
        keep_only_today_orders()
    elif args.create_test is not None:
        create_test_orders(args.create_test)
    elif args.stats:
        show_order_stats()

if __name__ == "__main__":
    main()
